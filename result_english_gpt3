medium pred: SELECT zip_postcode FROM Addresses WHERE address_id = (SELECT address_id FROM Teachers WHERE first_name = "Lyla")
medium gold: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  "Lyla" 

eval_err_num:1
extra pred: SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID, s.Name HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10
extra gold: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10 

eval_err_num:2
hard pred: SELECT Date FROM perpetrator WHERE Height = (SELECT MAX(Height) FROM perpetrator)
hard gold: SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1 

medium pred: SELECT Company, Investor FROM entrepreneur ORDER BY Company ASC
medium gold: SELECT Company ,  Investor FROM entrepreneur 

eval_err_num:3
hard pred: SELECT Publisher FROM book_club WHERE Year IN (1989, 1990) GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2
hard gold: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990 

eval_err_num:4
hard pred: SELECT Level, COUNT(*) AS count FROM member GROUP BY Level ORDER BY count DESC LIMIT 1
hard gold: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1 

extra pred: SELECT count(*) FROM routes WHERE src_ap IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_ap IN (SELECT apid FROM airports WHERE country = 'Canada')
extra gold: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States') 

eval_err_num:5
hard pred: SELECT MAX(resolution), MIN(resolution) FROM song WHERE duration = "3 minutes"
hard gold: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "3:%" 

extra pred: SELECT apt_number FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Bookings WHERE booking_status_code = 'Provisional') AND apt_id IN (SELECT apt_id FROM Apartment_Bookings WHERE booking_status_code = 'Confirmed')
extra gold: SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Provisional" 

eval_err_num:6
medium pred: SELECT Shop_ID, Shop_Details FROM Shops WHERE Shop_ID IN ( SELECT DISTINCT T1.Shop_ID FROM Tourist_Attractions AS T1 JOIN Locations AS T2 ON T1.Location_ID = T2.Location_ID WHERE T2.Other_Details LIKE '%can be reached by walk%' )
medium gold: SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk" 

medium pred: SELECT roomName FROM Rooms WHERE maxOccupancy = (SELECT MAX(maxOccupancy) FROM Rooms)
medium gold: SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1; 

hard pred: SELECT dept_name FROM department WHERE dept_name = ( SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1 )
hard gold: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1 

eval_err_num:7
medium pred: SELECT r.role_description, r.role_code, COUNT(e.employee_id) AS number_of_employees FROM Roles r LEFT JOIN Employees e ON r.role_code = e.role_code GROUP BY r.role_description, r.role_code
medium gold: SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code; 

extra pred: SELECT problem_id, problem_log_id FROM Problem_Log WHERE assigned_to_staff_id = ( SELECT staff_id FROM Staff WHERE staff_first_name = 'Rylan' AND staff_last_name = 'Homenick' )
extra gold: SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick" 

hard pred: SELECT Location FROM shop WHERE Open_Year > 2012 AND Open_Year < 2008 GROUP BY Location HAVING COUNT(Shop_ID) > 1
hard gold: SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008 

eval_err_num:8
extra pred: SELECT product_type_code, MAX(product_price) as max_price, MIN(product_price) as min_price FROM Products GROUP BY product_type_code ORDER BY product_type_code ASC
extra gold: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code 

hard pred: SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1
hard gold: SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student) 

hard pred: SELECT Nominee FROM musical WHERE Award = "Tony Award" AND Nominee IN ( SELECT Nominee FROM musical WHERE Award = "Drama Desk Award" )
hard gold: SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award" 

hard pred: SELECT artist_name, country FROM artist WHERE artist_name IN ( SELECT artist_name FROM song ORDER BY rating DESC LIMIT 3 )
hard gold: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3 

hard pred: SELECT DISTINCT Hometown FROM people WHERE People_ID NOT IN (SELECT DISTINCT Gymnast_ID FROM gymnast)
hard gold: SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID 

eval_err_num:9
medium pred: SELECT How_to_Get_There, COUNT(*) AS Number_of_Attractions FROM Tourist_Attractions GROUP BY How_to_Get_There
medium gold: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There 

eval_err_num:10
extra pred: SELECT title, film_id, description FROM film INNER JOIN film_actor ON film.film_id = film_actor.film_id GROUP BY film.film_id ORDER BY COUNT(film_actor.actor_id) DESC LIMIT 1
extra gold: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1 

hard pred: SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customer_Policies)
hard gold: SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id 

medium pred: SELECT Model_name, RAM_MiB FROM chip_model WHERE RAM_MiB = (SELECT MIN(RAM_MiB) FROM chip_model)
medium gold: SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1; 

eval_err_num:11
medium pred: SELECT COUNT(*) FROM Voting_record AS V JOIN Student AS S ON V.StuID = S.StuID WHERE S.city_code = "NYC" AND V.Election_Cycle = "spring" AND V.Class_Senator_Vote IS NOT NULL
medium gold: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring" 

extra pred: SELECT AVG(long) FROM station WHERE id NOT IN (SELECT station_id FROM status WHERE bikes_available > 10)
extra gold: SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10) 

extra pred: SELECT railway.Railway_ID, railway.Builder FROM railway JOIN train ON railway.Railway_ID = train.Railway_ID GROUP BY railway.Railway_ID, railway.Builder ORDER BY COUNT(train.Train_ID) DESC LIMIT 1
extra gold: SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1 

extra pred: SELECT s.name FROM student AS s JOIN takes AS t ON s.ID = t.ID JOIN prereq AS p ON t.course_id = p.prereq_id JOIN course AS c ON t.course_id = c.course_id WHERE c.title = 'International Finance'
extra gold: SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance') 

eval_err_num:12
extra pred: SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid, e.name, e.salary HAVING count(c.aid) = ( SELECT MAX(certificate_count) FROM ( SELECT COUNT(aid) as certificate_count FROM certificate GROUP BY eid ) t )
extra gold: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 

medium pred: SELECT DISTINCT forename FROM drivers WHERE driverId IN ( SELECT driverId FROM driverStandings WHERE positionText = '1' AND wins > 0 )
medium gold: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 

eval_err_num:13
medium pred: SELECT COUNT(*) FROM Reservations INNER JOIN Rooms ON Reservations.Room = Rooms.RoomId WHERE (Reservations.Adults + Reservations.Kids) = Rooms.maxOccupancy
medium gold: SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids; 

eval_err_num:14
medium pred: SELECT Software_Platform, COUNT(*) AS platform_count FROM device GROUP BY Software_Platform ORDER BY platform_count DESC
medium gold: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC 

eval_err_num:15
extra pred: SELECT DEPT_NAME, COUNT(*) as Prof_Count FROM DEPARTMENT JOIN PROFESSOR ON DEPARTMENT.DEPT_CODE = PROFESSOR.DEPT_CODE WHERE PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY DEPARTMENT.DEPT_NAME ORDER BY Prof_Count DESC LIMIT 1
extra gold: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1 

extra pred: SELECT STU_FNAME FROM STUDENT WHERE STU_LNAME LIKE 'S%' AND STU_CLASS = 'ACCT-211'
extra gold: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%' 

hard pred: SELECT DISTINCT City FROM branch WHERE City NOT IN (SELECT City FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID GROUP BY City HAVING COUNT(*) > 100)
hard gold: SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100 

medium pred: SELECT COUNT(problem_id), product_id FROM Problems GROUP BY product_id HAVING COUNT(problem_id) > 0
medium gold: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id 

medium pred: SELECT count(*) FROM course WHERE dept_code = (SELECT dept_code FROM department WHERE dept_name = 'Computer Information Systems')
medium gold: SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  "Computer Info. Systems" 

eval_err_num:16
medium pred: SELECT city, count(name) as num_stations FROM station GROUP BY city HAVING count(name) >= 15;
medium gold: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15 

medium pred: SELECT name FROM playlists WHERE id IN (SELECT playlist_id FROM playlist_tracks GROUP BY playlist_id HAVING COUNT(track_id) > 100)
medium gold: SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100; 

eval_err_num:17
extra pred: SELECT DISTINCT p.Owner FROM program p JOIN broadcast b1 ON p.Program_ID = b1.Program_ID JOIN broadcast b2 ON p.Program_ID = b2.Program_ID WHERE b1.Time_of_day = 'morning' AND b2.Time_of_day = 'night'
extra gold: SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Night" 

extra pred: SELECT Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID IN (SELECT Visit_ID FROM Visits WHERE Tourist_ID = (SELECT Tourist_ID FROM Visitors WHERE Tourist_Details = 'Alison')) AND Tourist_Attraction_ID NOT IN (SELECT Visit_ID FROM Visits WHERE Tourist_ID = (SELECT Tourist_ID FROM Visitors WHERE Tourist_Details = 'Rosalind'))
extra gold: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Rosalind" 

eval_err_num:18
extra pred: SELECT EMP_FNAME FROM PROFESSOR WHERE EMP_NUM IN ( SELECT EMP_NUM FROM CLASS WHERE CRS_CODE = 'CIS-220' OR CRS_CODE = 'QM-261' GROUP BY EMP_NUM HAVING COUNT(DISTINCT CRS_CODE) = 2 )
extra gold: SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261' 

medium pred: SELECT DISTINCT DEPARTMENT_ID FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(MANAGER_ID) >= 4
medium gold: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4 

eval_err_num:19
extra pred: SELECT organisation_id, organisation_type, organisation_details FROM Organisations WHERE organisation_id in (SELECT employer_organisation_id FROM Research_Staff GROUP BY employer_organisation_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Research_Staff GROUP BY employer_organisation_id) AS counts))
extra gold: SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 

medium pred: SELECT channel_code FROM Customer_Contact_Channels WHERE customer_id IN ( SELECT customer_id FROM Customers WHERE customer_name = "Tillman Ernser" )
medium gold: SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser" 

easy pred: SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2
easy gold: SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2 

hard pred: SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 AND Publisher IN (SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000)
hard gold: SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000 

eval_err_num:20
extra pred: SELECT COUNT(*) AS num_problems, P.product_name FROM Product P JOIN Problems PR ON P.product_id = PR.product_id GROUP BY P.product_id ORDER BY num_problems DESC LIMIT 1
extra gold: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1 

                     easy                 medium               hard                 extra                all                 
count                18                   41                   21                   20                   100                 
=====================   EXECUTION ACCURACY     =====================
execution            0.944                0.659                0.524                0.250                0.600               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.944                0.585                0.381                0.150                0.520               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               1.000                0.971                0.941                1.000                0.975               
select(no AGG)       1.000                0.971                0.941                1.000                0.975               
where                1.000                0.533                0.467                0.300                0.522               
where(no OP)         1.000                0.533                0.467                0.400                0.543               
group(no Having)     1.000                0.800                0.500                0.500                0.700               
group                0.000                0.600                0.500                0.500                0.500               
order                1.000                0.889                0.800                0.500                0.850               
and/or               1.000                0.951                1.000                0.944                0.968               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             1.000                0.731                0.471                0.727                0.708               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               1.000                0.805                0.762                0.550                0.780               
select(no AGG)       1.000                0.805                0.762                0.550                0.780               
where                1.000                0.533                0.538                0.214                0.500               
where(no OP)         1.000                0.533                0.538                0.286                0.521               
group(no Having)     1.000                0.400                0.333                0.111                0.304               
group                0.000                0.300                0.333                0.111                0.217               
order                1.000                0.727                0.500                0.125                0.548               
and/or               1.000                1.000                0.857                0.895                0.948               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             1.000                0.594                0.381                0.400                0.548               
---------------------- PARTIAL MATCHING F1 --------------------------
select               1.000                0.880                0.842                0.710                0.867               
select(no AGG)       1.000                0.880                0.842                0.710                0.867               
where                1.000                0.533                0.500                0.250                0.511               
where(no OP)         1.000                0.533                0.500                0.333                0.532               
group(no Having)     1.000                0.533                0.400                0.182                0.424               
group                1.000                0.400                0.400                0.182                0.303               
order                1.000                0.800                0.615                0.200                0.667               
and/or               1.000                0.975                0.923                0.919                0.958               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             1.000                0.655                0.421                0.516                0.617               
*** evaluating for english ***
