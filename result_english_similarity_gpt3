On downloading model...
On encode
extra pred: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(DISTINCT T2.region_id) >= 2 AND sum(T2.number_city_affected) >= 10
extra gold: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10 

eval_err_num:1
hard pred: SELECT Date FROM perpetrator ORDER BY Height DESC LIMIT 1
hard gold: SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1 

eval_err_num:2
hard pred: SELECT Level FROM member GROUP BY Level HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM member GROUP BY Level) AS counts)
hard gold: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1 

extra pred: SELECT AVG(bikes_available) FROM status WHERE station_id IN ( SELECT id FROM station WHERE city != 'Palo Alto' )
extra gold: SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  "Palo Alto") 

eval_err_num:3
hard pred: SELECT max(resolution), min(resolution) FROM song WHERE duration = '3:00'
hard gold: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "3:%" 

extra pred: SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Provisional" AND T2.apt_number IN ( SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed" )
extra gold: SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Provisional" 

medium pred: SELECT Roles.role_description, Roles.role_code, COUNT(Employees.employee_id) FROM Roles JOIN Employees ON Roles.role_code = Employees.role_code GROUP BY Roles.role_description, Roles.role_code;
medium gold: SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code; 

hard pred: SELECT Nominee FROM musical WHERE Award = "Tony Award" AND Nominee IN (SELECT Nominee FROM musical WHERE Award = "Drama Desk Award")
hard gold: SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award" 

eval_err_num:4
hard pred: SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN ( SELECT artist_name FROM song ORDER BY rating DESC LIMIT 3 ) AS T2 ON T1.artist_name = T2.artist_name
hard gold: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3 

hard pred: SELECT DISTINCT Hometown FROM people WHERE Hometown NOT IN (SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID)
hard gold: SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID 

hard pred: SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customer_Policies)
hard gold: SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id 

eval_err_num:5
medium pred: SELECT Hardware_Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;
medium gold: SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1; 

eval_err_num:6
extra pred: SELECT T2.Railway_ID, T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID, T1.Builder HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM train GROUP BY Railway_ID) AS temp)
extra gold: SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1 

eval_err_num:7
extra pred: SELECT T1.name, T1.salary FROM employee AS T1 JOIN (SELECT eid, COUNT(*) AS num_certificates FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.distance > 5000 GROUP BY eid ORDER BY num_certificates DESC LIMIT 1) AS T2 ON T1.eid = T2.eid
extra gold: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 

medium pred: SELECT count(*) FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId WHERE (Reservations.Adults + Reservations.Kids) = Rooms.maxOccupancy
medium gold: SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids; 

eval_err_num:8
medium pred: SELECT Software_Platform, COUNT(*) AS Count FROM device GROUP BY Software_Platform ORDER BY Count DESC
medium gold: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC 

eval_err_num:9
extra pred: SELECT T2.dept_name, count(*) as num_professors_phd FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY num_professors_phd DESC LIMIT 1
extra gold: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1 

medium pred: SELECT date, avg(mean_temperature_f), mean_humidity FROM weather WHERE max_gust_speed_mph IN ( SELECT max_gust_speed_mph FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3 ) GROUP BY date, mean_humidity
medium gold: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3 

hard pred: SELECT DISTINCT city FROM branch WHERE city NOT IN (SELECT city FROM branch WHERE membership_amount > 100)
hard gold: SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100 

eval_err_num:10
medium pred: SELECT COUNT(*) AS problem_count, p.product_id FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_id;
medium gold: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id 

medium pred: SELECT count(*) FROM COURSE WHERE DEPT_CODE = "Computer Information Systems";
medium gold: SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  "Computer Info. Systems" 

eval_err_num:11
medium pred: SELECT city, COUNT(*) AS number_of_stations FROM station GROUP BY city HAVING COUNT(*) >= 15;
medium gold: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15 

medium pred: SELECT customer_first_name, customer_last_name, customer_phone FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customers_Cards WHERE card_number = '4560596484842')
medium gold: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842" 

eval_err_num:12
hard pred: SELECT t.Name FROM team t WHERE t.Team_id NOT IN (SELECT ms.Team FROM match_season ms)
hard gold: SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season) 

medium pred: SELECT name FROM playlists WHERE id IN (SELECT playlist_id FROM playlist_tracks GROUP BY playlist_id HAVING COUNT(track_id) > 100);
medium gold: SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100; 

extra pred: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS V1 ON T1.Tourist_Attraction_ID = V1.Tourist_Attraction_ID JOIN Visitors AS V2 ON V1.Tourist_ID = V2.Tourist_ID WHERE V2.Tourist_Details = "Alison" AND T1.Tourist_Attraction_ID NOT IN (SELECT T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN Visits AS V1 ON T1.Tourist_Attraction_ID = V1.Tourist_Attraction_ID JOIN Visitors AS V2 ON V1.Tourist_ID = V2.Tourist_ID WHERE V2.Tourist_Details = "Rosalind")
extra gold: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Rosalind" 

eval_err_num:13
extra pred: SELECT T1.emp_fname FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code IN ('CIS-220', 'QM-261') GROUP BY T1.emp_fname HAVING COUNT(DISTINCT crs_code) = 2
extra gold: SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261' 

medium pred: SELECT DISTINCT department_id FROM employees WHERE department_id IN ( SELECT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4 )
medium gold: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4 

hard pred: SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000
hard gold: SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000 

hard pred: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester LIKE 'Spring%')
hard gold: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring') 

                     easy                 medium               hard                 extra                all                 
count                18                   41                   21                   20                   100                 
=====================   EXECUTION ACCURACY     =====================
execution            1.000                0.780                0.476                0.750                0.750               

====================== EXACT MATCHING ACCURACY =====================
exact match          1.000                0.732                0.476                0.600                0.700               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               1.000                0.946                1.000                1.000                0.977               
select(no AGG)       1.000                0.973                1.000                1.000                0.989               
where                1.000                0.667                0.571                0.727                0.694               
where(no OP)         1.000                0.667                0.643                0.818                0.735               
group(no Having)     1.000                0.667                1.000                1.000                0.867               
group                1.000                0.667                1.000                0.833                0.800               
order                1.000                1.000                1.000                1.000                1.000               
and/or               1.000                1.000                1.000                1.000                1.000               
IUEN                 0.000                0.000                1.000                1.000                1.000               
keywords             1.000                0.857                0.688                0.750                0.817               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               1.000                0.854                0.762                0.800                0.850               
select(no AGG)       1.000                0.878                0.762                0.800                0.860               
where                1.000                0.800                0.615                0.571                0.708               
where(no OP)         1.000                0.800                0.692                0.643                0.750               
group(no Having)     1.000                0.400                0.667                0.667                0.565               
group                1.000                0.400                0.667                0.556                0.522               
order                1.000                0.727                0.625                0.625                0.710               
and/or               1.000                1.000                0.905                0.900                0.960               
IUEN                 0.000                0.000                0.286                0.200                0.250               
keywords             1.000                0.750                0.524                0.600                0.690               
---------------------- PARTIAL MATCHING F1 --------------------------
select               1.000                0.897                0.865                0.889                0.909               
select(no AGG)       1.000                0.923                0.865                0.889                0.920               
where                1.000                0.727                0.593                0.640                0.701               
where(no OP)         1.000                0.727                0.667                0.720                0.742               
group(no Having)     1.000                0.500                0.800                0.800                0.684               
group                1.000                0.500                0.800                0.667                0.632               
order                1.000                0.842                0.769                0.769                0.830               
and/or               1.000                1.000                0.950                0.947                0.980               
IUEN                 1.000                1.000                0.444                0.333                0.400               
keywords             1.000                0.800                0.595                0.667                0.748               
*** evaluating for english ***
